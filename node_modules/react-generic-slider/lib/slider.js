'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slider = function (_React$Component) {
  _inherits(Slider, _React$Component);

  function Slider(props) {
    _classCallCheck(this, Slider);

    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

    _this.scrollLeft = _this.scrollLeft.bind(_this);
    _this.scrollRight = _this.scrollRight.bind(_this);
    _this.setVisibleItems = _this.setVisibleItems.bind(_this);
    _this.sliderStyle = _this.sliderStyle.bind(_this);
    _this.isOpaque = _this.isOpaque.bind(_this);
    _this.animate = _this.animate.bind(_this);

    _this.state = {
      currentPosition: 0,
      interval: null
    };
    return _this;
  }

  _createClass(Slider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.animate();
      this.setVisibleItems(this.props.visibleItems);

      window.addEventListener('resize', this.setVisibleItems.bind(this, this.props.visibleItems));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.setVisibleItems.bind(this, this.props.visibleItems));
    }
  }, {
    key: 'scrollLeft',
    value: function scrollLeft() {
      var end = this.props.children.length - this.props.visibleItems;
      var beginning = 0;

      if (this.props.isInfinite && this.state.currentPosition == beginning) {
        this.setState({ currentPosition: end });
      } else {
        if (this.state.currentPosition - this.props.slidesToScroll > beginning) {
          this.setState({ currentPosition: this.state.currentPosition - this.props.slidesToScroll });
        } else {
          this.setState({ currentPosition: beginning });
        }
      }
      this.animate();
    }
  }, {
    key: 'scrollRight',
    value: function scrollRight() {
      var end = this.props.children.length - this.props.visibleItems;
      var beginning = 0;

      if (this.props.isInfinite && this.state.currentPosition == end) {
        this.setState({ currentPosition: beginning });
      } else {
        // if we're not at the end, and moving forward wouldn't put us after the end
        if (this.state.currentPosition + this.props.slidesToScroll < end) {
          this.setState({ currentPosition: this.state.currentPosition + this.props.slidesToScroll });
        } else {
          this.setState({ currentPosition: end });
        }
      }
      this.animate();
    }
  }, {
    key: 'calculateShift',
    value: function calculateShift(offset, amount) {
      return offset * amount;
    }
  }, {
    key: 'setVisibleItems',
    value: function setVisibleItems(visibleItems) {
      var windowWidth = window.innerWidth;

      if (windowWidth < 720) {
        this.setState({ visibleItems: 1 });
      } else {
        this.setState({ visibleItems: visibleItems });
      }
    }
  }, {
    key: 'sliderStyle',
    value: function sliderStyle(classname) {
      var items = document.getElementsByClassName(classname);
      var itemWidth = items[0] ? items[0].offsetWidth : 0;
      var shift = this.calculateShift(itemWidth, this.state.currentPosition);
      var transform = 'translateX(-' + shift + 'px)';

      return { transform: transform };
    }
  }, {
    key: 'isOpaque',
    value: function isOpaque(key) {
      var nextPosition = this.state.visibleItems + this.state.currentPosition;
      var opaque = this.props.children.slice(this.state.currentPosition, nextPosition);

      return opaque.indexOf(this.props.children[key]) !== -1;
    }
  }, {
    key: 'animate',
    value: function animate() {
      if (this.state.interval) {
        clearInterval(this.state.interval);
      }

      if (!this.props.delay) {
        return false;
      }

      var interval = setInterval(this.scrollRight, this.props.delay);
      this.setState({ interval: interval });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var sliderStyle = this.sliderStyle('rsc-slider-item');
      var visibleItems = this.state.visibleItems;


      return _react2.default.createElement(
        'div',
        { className: 'rsc-container' },
        _react2.default.createElement(
          'div',
          { className: 'rsc-slider', style: sliderStyle },
          this.props.children.map(function (item, key) {
            var itemClass = _this2.isOpaque(key) ? 'rsc-slider-item' : 'rsc-slider-item rsc-slider-item_transparent';
            var imgWidth = 100 / visibleItems;

            return _react2.default.createElement(
              'div',
              { className: itemClass, key: key, style: { 'flex': '0 0 ' + imgWidth + '%' } },
              item
            );
          })
        ),
        this.props.children.length > visibleItems ? _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement('div', { className: 'rsc-navigation rsc-navigation_left rsc-arrow_left', onClick: this.scrollLeft }),
          _react2.default.createElement('div', { className: 'rsc-navigation rsc-navigation_right rsc-arrow_right', onClick: this.scrollRight })
        ) : null
      );
    }
  }]);

  return Slider;
}(_react2.default.Component);

Slider.defaultProps = {
  isInfinite: true,
  slidesToScroll: 1,
  delay: 5000,
  visibleItems: 4
};

exports.default = Slider;